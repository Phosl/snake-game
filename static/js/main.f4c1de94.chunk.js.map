{"version":3,"sources":["snake.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tickTime","rows","cols","grid","food","snake","head","tail","currentDirection","die","score","scoreFactor","handleKeyPress","bind","assertThisInitialized","row","Math","floor","random","col","arguments","length","undefined","sendBack","keys","_state","_loop","_loop2","isFood","isHead","isTail","forEach","t","push","setState","_this2","_state$snake$head","clearInterval","window","fnInterval","unshift","getRandomGrid","pop","newState","objectSpread","resetGrid","e","keyCode","_this3","document","body","addEventListener","getCenterOfGrid","setInterval","gameTick","removeEventListener","gridContent","map","react_default","a","createElement","key","toString","className","src","logo","alt","type","id","htmlFor","href","React","Component","Boolean","location","hostname","match","ReactDOM","render","react_router_dom","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f4c1de94.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/snake.a88ef9ab.svg\";","import React from 'react';\nimport './App.css';\nimport logo from './snake.svg';\n\n// eslint-disable-next-line\nconst log = data => console.log(JSON.stringify(data, null, 2));\n// eslint-disable-next-line\nconst lg = data => console.log(JSON.stringify(data));\n\nclass App extends React.Component {\n\n  state = {\n    tickTime: 200,\n    rows: 25,\n    cols: 25,\n    grid: [],\n    food: {},\n    snake: {\n      head: {},\n      tail: [],\n    },\n    currentDirection: 'right',\n    die: false,\n    score: 0,\n    scoreFactor: 10,\n  };\n\n  constructor(props) {\n    super(props);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  getRandomGrid() {\n    return {\n      row: Math.floor((Math.random() * this.state.rows)),\n      col: Math.floor((Math.random() * this.state.cols))\n    }\n  }\n\n  // TODO: snake and food begins at the center\n  getCenterOfGrid() {\n    return {\n      row: Math.floor((this.state.rows - 1) / 2),\n      col: Math.floor((this.state.cols - 1) / 2),\n    }\n  }\n\n  resetGrid(state = {}, sendBack = false) {\n\n    if (!Object.keys(state).length) {\n      state = this.state;\n    }\n\n    const grid = [];\n    const { rows, cols, food, snake } = state;\n\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < cols; col++) {\n        const isFood = (food.row === row && food.col === col);\n        const isHead = (snake.head.row === row && snake.head.col === col);\n        let isTail = false;\n        snake.tail.forEach(t => {\n          if (t.row === row && t.col === col) {\n            isTail = true;\n          }\n        })\n\n        grid.push({\n          row,\n          col,\n          isFood,\n          isHead,\n          isTail,\n        })\n      }\n    }\n\n    if (sendBack) {\n      return grid;\n    } else {\n      this.setState({ grid })\n    }\n  }\n\n  gameTick() {\n    this.setState((state) => {\n      let { currentDirection, snake, food } = state;\n      let { tail } = snake;\n\n      const { row, col } = state.snake.head;\n      let head = { row, col };\n\n      // When game ove is shown, stop the tick\n      if (state.die) {\n        clearInterval(window.fnInterval);\n      }\n\n      // Snake eats\n      tail.unshift({\n        row: head.row,\n        col: head.col,\n      })\n\n      // Snake does potty, only when not eating\n      if (head.row === state.food.row && head.col === state.food.col) {\n        food = this.getRandomGrid();\n      } else {\n        tail.pop();\n      }\n\n      // Snake moves head\n      switch (currentDirection) {\n        case 'left':\n          head.col--;\n          break;\n\n        case 'up':\n          head.row--;\n          break;\n\n        case 'down':\n          head.row++;\n          break;\n\n        case 'right':\n        default:\n          head.col++;\n          break;\n      }\n\n      const newState = {\n        ...state,\n        food,\n        snake: {\n          head,\n          tail\n        }\n      }\n\n      // In new state, check if die conditions are met\n      let die = false;\n      if (newState.snake.head.row < 0\n          || newState.snake.head.row >= this.state.rows\n          || newState.snake.head.col < 0\n          || newState.snake.head.col >= this.state.rows\n      ) {\n        die = true;\n      }\n\n      const grid = this.resetGrid(newState, true);\n      const score = newState.snake.tail.length * newState.scoreFactor;\n\n      return {\n        ...newState,\n        die,\n        grid,\n        score,\n      }\n    });\n\n  }\n\n  handleKeyPress(e) {\n    let { currentDirection } = this.state;\n\n    switch (e.keyCode) {\n      case 37:\n        currentDirection = 'left';\n        break;\n\n      case 38:\n          currentDirection = 'up';\n        break;\n\n      case 39:\n      default:\n          currentDirection = 'right';\n        break;\n\n      case 40:\n          currentDirection = 'down';\n        break;\n    }\n\n    const newState = {\n      ...this.state,\n      currentDirection,\n    }\n    const grid = this.resetGrid(newState, true);\n\n\n    this.setState(state => {\n      return {\n        ...newState,\n        grid\n      }\n    })\n  }\n\n  componentDidMount() {\n\n    document.body.addEventListener('keydown', this.handleKeyPress);\n\n    this.setState((state) => {\n      const newState = {\n        ...state,\n        food: this.getRandomGrid(),\n        snake: {\n          head: this.getCenterOfGrid(),\n          tail: state.snake.tail\n        }\n      };\n      const grid = this.resetGrid(newState, true);\n      return {\n        ...newState,\n        grid,\n      }\n    });\n\n    this.resetGrid();\n\n    // Set tick\n    window.fnInterval = setInterval(() => {\n      this.gameTick();\n    }, this.state.tickTime);\n  }\n\n  componentWillUnmount() {\n    document.body.removeEventListener('keydown', this.handleKeyPress);\n    clearInterval(window.fnInterval);\n  }\n\n  render () {\n    let gridContent = this.state.grid.map((grid) => {\n      return <div\n        key={grid.row.toString() + '-' + grid.col.toString()}\n        className={\n          grid.isHead\n          ? 'gridItem is-head' : grid.isTail\n          ? 'gridItem is-tail' : grid.isFood\n          ? 'gridItem is-food' : 'gridItem'\n        }></div>\n    });\n    if (this.state.die) {\n      gridContent = <div className=\"grid-message\">\n        <h1>Game Over</h1>\n      </div>;\n    }\n    return (\n      <div>\n        <nav className=\"navBar\">\n          <nav className=\"wrapper\">\n            <div className=\"logo\">\n              <img src={logo} alt=\"Snake\" />\n            </div>\n            <input type=\"checkbox\" id=\"menu-toggle\" />\n              <label htmlFor=\"menu-toggle\" className=\"label-toggle\"></label>\n            <ul>\n              <li><a href=\"/register\">Register</a></li>\n              <li><a href=\"/login\">Login</a></li>\n            </ul>\n          </nav>\n        </nav>\n        <div className=\"snake-container wrapper\">\n          <div className=\"grid-header\">\n            <h1>Your score: {this.state.score}</h1>\n          </div>\n          <div className=\"grid\">{gridContent}</div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}